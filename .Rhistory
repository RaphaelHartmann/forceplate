gc()
setTxtProgressBar(pb, i)
}
close(pb)
gc()
# SAVE ALL IN ONE LARGE DATA.TABLE
dt.final <- rbindlist(list.bioware.dt)
setattr(dt.final, "class", c("fp.segm", class(dt.final)))
setattr(dt.final, "start.trigger", start.trigger)
setattr(dt.final, "sampling.freq", sampling.freq)
setattr(dt.final, "baseline.correction", ifelse(all(baseline.trigger==0), "FALSE", "TRUE"))
setattr(dt.final, "center.of.pressure", ifelse(az0, "TRUE", "FALSE"))
setattr(dt.final, "filter", ifelse(cutoff.freq, as.character(cutoff.freq), "FALSE"))
setattr(dt.final, "sorting", as.character(sort))
setattr(dt.final, "imputatation", ifelse(is.null(imputation), "FALSE", imputation))
fp.dt <- copy(dt.final)
fp.dt$forceplate[[1]]
filenames <- c(paste0("/home/fluffy/Documents/R4Kraftmessplatte/Leif_2023_Daten_VP13/VP13_Stehen/subj13_block", 1:10, ".txt"))
n.trials = 80
baseline.trigger = 128
baseline.intv = c(0, 99)
start.trigger = 128
start.prepend = 0
stimulus.trigger.list = c(1, 2, 4, 8)
response.trigger.list = c(32, 64)
cond.trigger.list = list(con.pos = c(1, 2, 4, 8))
variable.names = NULL
skip = 19
az0 = -41
sampling.freq = 1000
cutoff.freq = 0
imputation = NULL
sort = TRUE
verbose = FALSE
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 99),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 0,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 107),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 0,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]$Fx
fp.dt$forceplate[[1]]
filenames <- c(paste0("/home/fluffy/Documents/R4Kraftmessplatte/Leif_2023_Daten_VP13/VP13_Stehen/subj13_block", 1:10, ".txt"))
n.trials = 80
baseline.trigger = 128
baseline.intv = c(0, 99)
start.trigger = 128
start.prepend = 0
stimulus.trigger.list = c(1, 2, 4, 8)
response.trigger.list = c(32, 64)
cond.trigger.list = list(con.pos = c(1, 2, 4, 8))
variable.names = NULL
skip = 19
az0 = -41
sampling.freq = 1000
cutoff.freq = 0
imputation = NULL
sort = TRUE
verbose = FALSE
check_character_vector(filenames)
check_subj_in_character(filenames)
check_block_in_character(filenames)
check_numeric_vector(n.trials)
check_numeric_vector(baseline.trigger)
check_numeric_vector(start.trigger)
check_potential_named_list_vectors(stimulus.trigger.list)
check_potential_named_list_vectors(response.trigger.list)
if (!is.list(stimulus.trigger.list)) stimulus.trigger.list <- list(stimulus.trigger.list)
if (!is.list(response.trigger.list)) response.trigger.list <- list(response.trigger.list)
if (length(response.trigger.list) != length(stimulus.trigger.list)) stop("stimulus- and response.trigger.list must be of the same length")
if (length(response.trigger.list) > 1) {
if (!identical(sort(names(response.trigger.list)), sort(names(stimulus.trigger.list)))) stop("stimulus- and response.trigger.list must have same element names")
list.names <- names(response.trigger.list)
stimulus.trigger.list <- stimulus.trigger.list[list.names]
}
if (!is.null(variable.names)) check_variable_names(variable.names)
check_interval(baseline.intv)
check_numeric_element(start.prepend)
check_named_list_vectors(cond.trigger.list)
check_numeric_element(skip)
if (skip < 1) stop("skip must be larger than 0")
check_numeric_element(az0)
check_logical_element(sort)
if (!is.null(imputation)) check_imputation(imputation)
check_numeric_element(sampling.freq)
# CREATE RESULTING DATA.TABLE
final.bioware.dt <- data.table()
# PREPARE FILENAMES
length.fn <- length(filenames)
fn.info <- extract_info_fn(filenames)
order.fn <- 1:length.fn
if (sort) {
order.fn <- order(fn.info$subjNR, fn.info$blockNR)
filenames <- filenames[order.fn]
if (length(n.trials) > 1) {
n.trials <- n.trials[order.fn]
} else {
n.trials <- rep(n.trials, length.fn)
}
setorder(fn.info, subjNR, blockNR)
}
# PREPARE PROGRESS BAR
pb <- txtProgressBar(style = 3, min = 0, max = length.fn, width = 50)
# VARIABLE MAPPING
tmp.new.names <- NULL
if (!is.null(variable.names)) tmp.new.names <- as.character(unlist(variable.names))
patterns <- c("Fx", "Fy", "Fz", "Mx", "My", "Mz", "time", "aux", tmp.new.names)
pattern_regex <- paste(patterns, collapse = "|")
lines <- readLines(filenames[1], n = skip)
counts <- stri_count_regex(lines, pattern_regex)
old.names <- strsplit(lines[tail(which.max(counts), 1)], "\t")[[1]]
if (!is.null(variable.names)) {
if (any(!as.character(unlist(variable.names)) %in% old.names)) stop("make sure all names in variable.names are in the data as well")
}
new.names <- set_port_names(variable.names, old.names)
new.names <- set_time_name(variable.names, new.names)
new.names <- set_measure_names(variable.names, new.names)
port.names <- new.names[which(grepl("port", new.names))]
time.name <- new.names[which(grepl("time", new.names))[1]]
measure.names <- new.names[which(!new.names %in% c(time.name, port.names))]
if (az0) measure.names.az0 <- c(measure.names, c("CoPx", "CoPy"))
# CREATE SOME CONSTANT OBJECTS
cond.names <- names(cond.trigger.list)
samp.factor <- sampling.freq/1000
# cols <- variable.names
# if (az0) measure.names.az0 <- c(measure.names.az0, "CoPx", "CoPy")
# colsnew <- paste0(cols, "_bc")
# col.names.filter <- cols
if (cutoff.freq) bf <- butter(n = 4, W = cutoff.freq/(sampling.freq/2), type = "low")
# LIST (OF DATA.TABLE OBJECTS) CONTAINING ALL SUBJECTS AND BLOCKS
list.bioware.dt <- list()
i=1
num.trials <- n.trials[i]
# READ IN FILE BY NAME
tmp.dt <- fread(filenames[i], skip = skip, col.names = new.names) #, na.strings = na.strings)
tmp.dt
View(tmp.dt)
View(data.frame(fx = tmp.dt))
View(data.frame(fx = tmp.dt$Fx))
tmp.dt$Fx[2719:2730]
tmp.dt$Fx[2719:2740]
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 0,
baseline.intv = c(0, 107),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 0,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 0,
baseline.intv = c(0, 107),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(1, 108),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(1, 108),
start.trigger = 128,
start.prepend = 200,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(1, 108),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]
fp.dt$forceplate[[1]]$Mx
tail(fp.dt$forceplate[[1]]$Mx, 15)
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 108),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
tail(fp.dt$forceplate[[1]]$Mx, 15)
devtools::load_all(".")
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 108),
start.trigger = 128,
start.prepend = 0,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 108),
start.trigger = 128,
start.prepend = 200,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt$forceplate[[1]]$Mx
fp.dt$forceplate[[1]]
fp.dt$forceplate[[1]]$Mx
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 128,
baseline.intv = c(0, 108),
start.trigger = 128,
start.prepend = 201,
stimulus.trigger.list = c(1, 2, 4, 8),
response.trigger.list = c(32, 64),
cond.trigger.list = list(con.pos = c(1, 2, 4, 8)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
# Leifs DATA
tl.dt <- time_lock_fp_data(fp.dt = fp.dt,
vars = c("Mx", "My"),
time.lock.trigger = c(1,2,4,8),
bins = c(0, 7*150),
bin.width = 150,
n.bins = NULL,
FUN = list(mean = mean, sd = sd, range = function(x) diff(range(x))),
verbose = FALSE)
# Leifs DATA
tl.dt <- time_lock_fp_data(fp.dt = fp.dt,
vars = c("Mx", "My"),
time.lock.trigger = c(1,2,4,8),
bins = c(0, 6*150),
bin.width = 150,
n.bins = NULL,
FUN = list(mean = mean, sd = sd, range = function(x) diff(range(x))),
verbose = FALSE)
# Leifs DATA
tl.dt <- time_lock_fp_data(fp.dt = fp.dt,
vars = c("Mx", "My"),
time.lock.trigger = c(1,2,4,8),
bins = c(0, 2*150),
bin.width = 150,
n.bins = NULL,
FUN = list(mean = mean, sd = sd, range = function(x) diff(range(x))),
verbose = FALSE)
tl.dt$`mean_Mx[0, 149]`
tl.dt$`mean_Mx[150, 299]`
# Leifs DATA
tl.dt <- time_lock_fp_data(fp.dt = fp.dt,
vars = c("Mx", "My"),
time.lock.trigger = c(1,2,4,8),
bins = c(-300, 2*150),
bin.width = 150,
n.bins = NULL,
FUN = list(mean = mean, sd = sd, range = function(x) diff(range(x))),
verbose = FALSE)
tl.dt
tl.dt$`mean_Mx[-300, -151]`
tl.dt[, -forceplate]
tl.dt[, -c("forceplate")]
tl.dt[, c("forceplate")]
as.data.frame(tl.dt[, c("forceplate")])
as.data.frame(tl.dt[, c("forceplate")])
as.data.frame(tl.dt[, -c("forceplate")])
fp.dt$forceplate[[1]]$Mx
roxygen2::roxygenise()
devtools::load_all(".")
fp1 <- fp.dt$forceplate[[1]]
fp1 <- copy(fp.dt$forceplate[[1]])
fp1
fp1$events==3
which(fp1$events==4)
which(fp1$events==4)[1:150]
fp1$Mx[which(fp1$events==4)[1:150]]
mean(fp1$Mx[which(fp1$events==4)[1:150]])
tl.dt$`mean_Mx[0, 149]`
fp2 <- copy(fp.dt$forceplate[[2]])
which(fp2$events==4)[1:150]
mean(fp2$Mx[which(fp2$events==4)[1:150]])
sd(fp1$Mx[which(fp1$events==4)[1:150]])
sd(fp2$Mx[which(fp2$events==4)[1:150]])
tl.dt$`sd_Mx[0, 149]`
mean(fp1$Mx[which(fp1$events==4)[(1+201):(150+201)]])
mean(fp1$Mx[which(fp1$events==4)[(1-201):(150-201)]])
(1-201):(150-201)
mean(fp1$Mx[which(fp1$events==128)[1:150]])
mean(fp1$Mx[which(fp1$events==4)[1:150]])
means <- NULL;
for (i in 300:1) {
means[i] <- mean(fp1$Mx[which(fp1$events==4)[(1-i):(150-i)]])
}
means <- NULL;
for (i in 1:900) {
means[i] <- mean(fp1$Mx[(1+i):15+i]])
means <- NULL;
for (i in 1:900) {
means[i] <- mean(fp1$Mx[(1+i):(15+i)])
}
means
plot(means)
plot(means, type = "l")
abline(h=-0.3114)
means[which(means > -0.3118 & means < -0.3110)]
which(means > -0.3118 & means < -0.3110)
means[70]
means[70+150]
which(means > -0.1158-.0002 & means < -0.3110+.0002)
which(means > -0.1160 & means < -0.1150)
which(means > 0.1710 & means < 0.1720)
means <- NULL;
for (i in 300:1) {
means[i] <- mean(fp1$Mx[which(fp1$events==32)[(1-i):(150-i)]])
}
means <- NULL;
for (i in 150:150) {
means[i] <- mean(fp1$Mx[which(fp1$events==32)[1:150]])
}
means
means <- NULL;
for (i in c(0, 150)) {
means[i] <- mean(fp1$Mx[which(fp1$events==32)[1:150]])
}
means
mean(fp1$Mx[which(fp1$events==32)[1:150]])
mean(fp1$Mx[which(fp1$events==32)[0:149]])
mean(fp1$Mx[which(fp1$events==32)[150:299]])
which(fp1$events==32)[0:149]
means <- NULL;
for (i in 640:1400) {
means[i] <- mean(fp1$Mx[i:(i+149)]])
means <- NULL;
for (i in 640:1400) {
means[i] <- mean(fp1$Mx[i:(i+149)])
}
means
plot(means)
plot(means, type = "l")
mean(fp1$Mx[which(fp1$events==4)[0:149]])
means <- NULL;
for (i in 0:1400) {
means[i] <- mean(fp1$Mx[i:(i+149)])
}
plot(means, type = "l")
means <- NULL;
for (i in 1:1400) {
means[i] <- mean(fp1$Mx[i:(i+149)])
}
plot(means, type = "l")
means[70]
means[71]
means[69]
fp1 <- copy(fp.dt$forceplate[[1]])
means <- NULL;
for (i in 1:1400) {
means[i] <- mean(fp1$Mx[i:(i+149)])
}
means[69]
# filenames <- c("/home/fluffy/Downloads/KMP_data/Exp1_subj997_block003.txt", "/home/fluffy/Downloads/KMP_data/Exp1_subj998_block004.txt")
filenames <- paste0("FR_20231110_subj555_block00", 4:7, ".txt")
filenames
# filenames <- c("/home/fluffy/Downloads/KMP_data/Exp1_subj997_block003.txt", "/home/fluffy/Downloads/KMP_data/Exp1_subj998_block004.txt")
filenames <- paste0("../../../../Downloads/subj555/FR_20231110_subj555_block00", 4:7, ".txt")
fp.dt <- segment_fp_data(filenames = filenames,
n.trials = 80,
baseline.trigger = 2,
baseline.intv = c(-100, 100),
start.trigger = 2,
start.prepend = 0,
stimulus.trigger.list = list(manual = c(16, 17), vocal = c(64, 65)),
response.trigger.list = list(manual = c(32,33,34,36), vocal = c(128,129,130,132)),
cond.trigger.list = list(soa = c(8,9), compatibility = c(64, 65)),
variable.names = NULL,
skip = 19,
az0 = -41,
sampling.freq = 1000,
cutoff.freq = 10,
imputation = NULL,
sort = TRUE,
verbose = FALSE)
fp.dt
data.table:::print.data.table(fp.dt)
fp.dt$forceplate[[1]]
fp.dt$forceplate[[1]]$events
rle(fp.dt$forceplate[[1]]$events)
data.table:::print.data.table(fp.dt)
devtools::load_all(".")
print(fp.dt)
devtools::load_all(".")
roxygen2::roxygenise()
devtools::load_all(".")
class(fp.dt)
class(as.data.table(fp.dt))
class(data.table::as.data.table(fp.dt))
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
fp.dt
